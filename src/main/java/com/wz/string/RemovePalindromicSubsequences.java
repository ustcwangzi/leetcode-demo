package com.wz.string;

/**
 * Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
 * Return the minimum number of steps to make the given string empty.
 * A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
 * A string is called palindrome if is one that reads the same backward as well as forward.
 *
 * Example 1:
 * Input: s = "ababa"
 * Output: 1
 * Explanation: String is already palindrome
 *
 * Example 2:
 * Input: s = "abb"
 * Output: 2
 * Explanation: "abb" -> "bb" -> "".
 * Remove palindromic subsequence "a" then "bb".
 *
 * Example 3:
 * Input: s = ""
 * Output: 0
 *
 * Constraints:
 * 1. 0 <= s.length <= 1000
 * 2. s only consists of letters 'a' and 'b'
 */
public class RemovePalindromicSubsequences {
    public static void main(String[] args) {
        System.out.println("baabb");
    }

    /**
     * s 是由"a"和"b"组合而成，可做以下操作：
     * 1. 如 s 为空，返回 0
     * 2. 若 s 就是回文，返回 1
     * 3. 先删除 s 中全部"a"，再删除 s 中全部b，返回 2
     */
    public static int removePalindromeSub(String s) {
        if (s.isEmpty()) {
            return 0;
        }
        return s.equals(new StringBuilder(s).reverse().toString()) ? 1 : 2;
    }
}
